/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { SeacowsErrors, SeacowsErrorsInterface } from "../SeacowsErrors";

const _abi = [
  {
    inputs: [],
    name: "SR_ETH_TRANSFER_FAILED",
    type: "error",
  },
  {
    inputs: [],
    name: "SR_EXCESSIVE_INPUT_AMOUNT",
    type: "error",
  },
  {
    inputs: [],
    name: "SR_EXPIRED",
    type: "error",
  },
  {
    inputs: [],
    name: "SR_INSUFFICIENT_OUTPUT_AMOUNT",
    type: "error",
  },
  {
    inputs: [],
    name: "SR_INVALID_PARAMS_LENGTH",
    type: "error",
  },
  {
    inputs: [],
    name: "SSC_NOT_SEACOWS_PAIR",
    type: "error",
  },
  {
    inputs: [],
    name: "SSC_PAIR_MISMATCH",
    type: "error",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212208e243e1f3582c350376fb2ed44d10a2b25d1c1b1723029e2b9a7a370d19b6e6764736f6c63430008120033";

export class SeacowsErrors__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SeacowsErrors> {
    return super.deploy(overrides || {}) as Promise<SeacowsErrors>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SeacowsErrors {
    return super.attach(address) as SeacowsErrors;
  }
  connect(signer: Signer): SeacowsErrors__factory {
    return super.connect(signer) as SeacowsErrors__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SeacowsErrorsInterface {
    return new utils.Interface(_abi) as SeacowsErrorsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SeacowsErrors {
    return new Contract(address, _abi, signerOrProvider) as SeacowsErrors;
  }
}
