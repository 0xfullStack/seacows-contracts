/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SeacowsRouterInterface extends ethers.utils.Interface {
  functions: {
    "batchSwapETHForExactNFTs(address[],uint256[][],uint256[],uint256,address,uint256)": FunctionFragment;
    "batchSwapExactNFTsForETH(address[],uint256[][],uint256[],uint256[],address,uint256)": FunctionFragment;
    "batchSwapExactNFTsForTokens(address[],uint256[][],uint256[],uint256,address,uint256)": FunctionFragment;
    "batchSwapTokensForExactNFTs(address[],uint256[][],uint256[],uint256,address,uint256)": FunctionFragment;
    "manager()": FunctionFragment;
    "seacowsSwapCallback(bytes)": FunctionFragment;
    "swapETHForExactNFTs(address,uint256[],uint256,uint256,address,uint256)": FunctionFragment;
    "swapExactNFTsForETH(address,uint256[],uint256,uint256,address,uint256)": FunctionFragment;
    "swapExactNFTsForTokens(address,uint256[],uint256,uint256,address,uint256)": FunctionFragment;
    "swapTokensForExactNFTs(address,uint256[],uint256,uint256,address,uint256)": FunctionFragment;
    "weth()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "batchSwapETHForExactNFTs",
    values: [
      string[],
      BigNumberish[][],
      BigNumberish[],
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchSwapExactNFTsForETH",
    values: [
      string[],
      BigNumberish[][],
      BigNumberish[],
      BigNumberish[],
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchSwapExactNFTsForTokens",
    values: [
      string[],
      BigNumberish[][],
      BigNumberish[],
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchSwapTokensForExactNFTs",
    values: [
      string[],
      BigNumberish[][],
      BigNumberish[],
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "seacowsSwapCallback",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapETHForExactNFTs",
    values: [
      string,
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactNFTsForETH",
    values: [
      string,
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactNFTsForTokens",
    values: [
      string,
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactNFTs",
    values: [
      string,
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "batchSwapETHForExactNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchSwapExactNFTsForETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchSwapExactNFTsForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchSwapTokensForExactNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "seacowsSwapCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapETHForExactNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactNFTsForETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactNFTsForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;

  events: {};
}

export class SeacowsRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SeacowsRouterInterface;

  functions: {
    batchSwapETHForExactNFTs(
      _pairs: string[],
      idsOuts: BigNumberish[][],
      amountInMaxs: BigNumberish[],
      royaltyPercent: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchSwapExactNFTsForETH(
      _pairs: string[],
      idsIns: BigNumberish[][],
      amountOutMins: BigNumberish[],
      royaltyPercent: BigNumberish[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchSwapExactNFTsForTokens(
      _pairs: string[],
      idsIns: BigNumberish[][],
      amountOutMins: BigNumberish[],
      royaltyPercent: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchSwapTokensForExactNFTs(
      _pairs: string[],
      idsOuts: BigNumberish[][],
      amountInMaxs: BigNumberish[],
      royaltyPercent: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    manager(overrides?: CallOverrides): Promise<[string]>;

    seacowsSwapCallback(
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapETHForExactNFTs(
      _pair: string,
      idsOut: BigNumberish[],
      amountInMax: BigNumberish,
      royaltyPercent: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapExactNFTsForETH(
      _pair: string,
      idsIn: BigNumberish[],
      amountOutMin: BigNumberish,
      royaltyPercent: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapExactNFTsForTokens(
      _pair: string,
      idsIn: BigNumberish[],
      amountOutMin: BigNumberish,
      royaltyPercent: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapTokensForExactNFTs(
      _pair: string,
      idsOut: BigNumberish[],
      amountInMax: BigNumberish,
      royaltyPercent: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    weth(overrides?: CallOverrides): Promise<[string]>;
  };

  batchSwapETHForExactNFTs(
    _pairs: string[],
    idsOuts: BigNumberish[][],
    amountInMaxs: BigNumberish[],
    royaltyPercent: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchSwapExactNFTsForETH(
    _pairs: string[],
    idsIns: BigNumberish[][],
    amountOutMins: BigNumberish[],
    royaltyPercent: BigNumberish[],
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchSwapExactNFTsForTokens(
    _pairs: string[],
    idsIns: BigNumberish[][],
    amountOutMins: BigNumberish[],
    royaltyPercent: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchSwapTokensForExactNFTs(
    _pairs: string[],
    idsOuts: BigNumberish[][],
    amountInMaxs: BigNumberish[],
    royaltyPercent: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  manager(overrides?: CallOverrides): Promise<string>;

  seacowsSwapCallback(
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapETHForExactNFTs(
    _pair: string,
    idsOut: BigNumberish[],
    amountInMax: BigNumberish,
    royaltyPercent: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapExactNFTsForETH(
    _pair: string,
    idsIn: BigNumberish[],
    amountOutMin: BigNumberish,
    royaltyPercent: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapExactNFTsForTokens(
    _pair: string,
    idsIn: BigNumberish[],
    amountOutMin: BigNumberish,
    royaltyPercent: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapTokensForExactNFTs(
    _pair: string,
    idsOut: BigNumberish[],
    amountInMax: BigNumberish,
    royaltyPercent: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  weth(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    batchSwapETHForExactNFTs(
      _pairs: string[],
      idsOuts: BigNumberish[][],
      amountInMaxs: BigNumberish[],
      royaltyPercent: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchSwapExactNFTsForETH(
      _pairs: string[],
      idsIns: BigNumberish[][],
      amountOutMins: BigNumberish[],
      royaltyPercent: BigNumberish[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchSwapExactNFTsForTokens(
      _pairs: string[],
      idsIns: BigNumberish[][],
      amountOutMins: BigNumberish[],
      royaltyPercent: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchSwapTokensForExactNFTs(
      _pairs: string[],
      idsOuts: BigNumberish[][],
      amountInMaxs: BigNumberish[],
      royaltyPercent: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<string>;

    seacowsSwapCallback(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & {
        tokenAmountIn: BigNumber;
        idsIn: BigNumber[];
      }
    >;

    swapETHForExactNFTs(
      _pair: string,
      idsOut: BigNumberish[],
      amountInMax: BigNumberish,
      royaltyPercent: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactNFTsForETH(
      _pair: string,
      idsIn: BigNumberish[],
      amountOutMin: BigNumberish,
      royaltyPercent: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactNFTsForTokens(
      _pair: string,
      idsIn: BigNumberish[],
      amountOutMin: BigNumberish,
      royaltyPercent: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapTokensForExactNFTs(
      _pair: string,
      idsOut: BigNumberish[],
      amountInMax: BigNumberish,
      royaltyPercent: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    batchSwapETHForExactNFTs(
      _pairs: string[],
      idsOuts: BigNumberish[][],
      amountInMaxs: BigNumberish[],
      royaltyPercent: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchSwapExactNFTsForETH(
      _pairs: string[],
      idsIns: BigNumberish[][],
      amountOutMins: BigNumberish[],
      royaltyPercent: BigNumberish[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchSwapExactNFTsForTokens(
      _pairs: string[],
      idsIns: BigNumberish[][],
      amountOutMins: BigNumberish[],
      royaltyPercent: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchSwapTokensForExactNFTs(
      _pairs: string[],
      idsOuts: BigNumberish[][],
      amountInMaxs: BigNumberish[],
      royaltyPercent: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;

    seacowsSwapCallback(
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapETHForExactNFTs(
      _pair: string,
      idsOut: BigNumberish[],
      amountInMax: BigNumberish,
      royaltyPercent: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapExactNFTsForETH(
      _pair: string,
      idsIn: BigNumberish[],
      amountOutMin: BigNumberish,
      royaltyPercent: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapExactNFTsForTokens(
      _pair: string,
      idsIn: BigNumberish[],
      amountOutMin: BigNumberish,
      royaltyPercent: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapTokensForExactNFTs(
      _pair: string,
      idsOut: BigNumberish[],
      amountInMax: BigNumberish,
      royaltyPercent: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    batchSwapETHForExactNFTs(
      _pairs: string[],
      idsOuts: BigNumberish[][],
      amountInMaxs: BigNumberish[],
      royaltyPercent: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchSwapExactNFTsForETH(
      _pairs: string[],
      idsIns: BigNumberish[][],
      amountOutMins: BigNumberish[],
      royaltyPercent: BigNumberish[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchSwapExactNFTsForTokens(
      _pairs: string[],
      idsIns: BigNumberish[][],
      amountOutMins: BigNumberish[],
      royaltyPercent: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchSwapTokensForExactNFTs(
      _pairs: string[],
      idsOuts: BigNumberish[][],
      amountInMaxs: BigNumberish[],
      royaltyPercent: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seacowsSwapCallback(
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapETHForExactNFTs(
      _pair: string,
      idsOut: BigNumberish[],
      amountInMax: BigNumberish,
      royaltyPercent: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapExactNFTsForETH(
      _pair: string,
      idsIn: BigNumberish[],
      amountOutMin: BigNumberish,
      royaltyPercent: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapExactNFTsForTokens(
      _pair: string,
      idsIn: BigNumberish[],
      amountOutMin: BigNumberish,
      royaltyPercent: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapTokensForExactNFTs(
      _pair: string,
      idsOut: BigNumberish[],
      amountInMax: BigNumberish,
      royaltyPercent: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
