/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface FixidityLibInterface extends ethers.utils.Interface {
  functions: {
    "abs(int256)": FunctionFragment;
    "add(int256,int256)": FunctionFragment;
    "convertFixed(int256,uint8,uint8)": FunctionFragment;
    "digits()": FunctionFragment;
    "divide(int256,int256)": FunctionFragment;
    "fixed1()": FunctionFragment;
    "fractional(int256)": FunctionFragment;
    "fromFixed(int256)": FunctionFragment;
    "integer(int256)": FunctionFragment;
    "maxFixedAdd()": FunctionFragment;
    "maxFixedDiv()": FunctionFragment;
    "maxFixedDivisor()": FunctionFragment;
    "maxFixedMul()": FunctionFragment;
    "maxFixedSub()": FunctionFragment;
    "maxInt256()": FunctionFragment;
    "maxNewFixed()": FunctionFragment;
    "minInt256()": FunctionFragment;
    "minNewFixed()": FunctionFragment;
    "mulPrecision()": FunctionFragment;
    "multiply(int256,int256)": FunctionFragment;
    "newFixed(int256)": FunctionFragment;
    "newFixedFraction(int256,int256)": FunctionFragment;
    "reciprocal(int256)": FunctionFragment;
    "subtract(int256,int256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "abs", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "add",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertFixed",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "digits", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "divide",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fixed1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fractional",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fromFixed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "integer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxFixedAdd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxFixedDiv",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxFixedDivisor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxFixedMul",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxFixedSub",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxInt256", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxNewFixed",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "minInt256", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minNewFixed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mulPrecision",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multiply",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "newFixed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "newFixedFraction",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reciprocal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subtract",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "abs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "convertFixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "digits", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "divide", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fixed1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fractional", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fromFixed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "integer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxFixedAdd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxFixedDiv",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxFixedDivisor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxFixedMul",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxFixedSub",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxInt256", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxNewFixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minInt256", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minNewFixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mulPrecision",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multiply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newFixed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newFixedFraction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reciprocal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "subtract", data: BytesLike): Result;

  events: {};
}

export class FixidityLib extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FixidityLibInterface;

  functions: {
    abs(x: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    add(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    convertFixed(
      x: BigNumberish,
      _originDigits: BigNumberish,
      _destinationDigits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    digits(overrides?: CallOverrides): Promise<[number]>;

    divide(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    fixed1(overrides?: CallOverrides): Promise<[BigNumber]>;

    fractional(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "fromFixed(int256)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "fromFixed(int256,uint8)"(
      x: BigNumberish,
      _destinationDigits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    integer(x: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    maxFixedAdd(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxFixedDiv(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxFixedDivisor(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxFixedMul(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxFixedSub(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxInt256(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxNewFixed(overrides?: CallOverrides): Promise<[BigNumber]>;

    minInt256(overrides?: CallOverrides): Promise<[BigNumber]>;

    minNewFixed(overrides?: CallOverrides): Promise<[BigNumber]>;

    mulPrecision(overrides?: CallOverrides): Promise<[BigNumber]>;

    multiply(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "newFixed(int256)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "newFixed(int256,uint8)"(
      x: BigNumberish,
      _originDigits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    newFixedFraction(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    reciprocal(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    subtract(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  abs(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  add(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convertFixed(
    x: BigNumberish,
    _originDigits: BigNumberish,
    _destinationDigits: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  digits(overrides?: CallOverrides): Promise<number>;

  divide(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fixed1(overrides?: CallOverrides): Promise<BigNumber>;

  fractional(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "fromFixed(int256)"(
    x: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "fromFixed(int256,uint8)"(
    x: BigNumberish,
    _destinationDigits: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  integer(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  maxFixedAdd(overrides?: CallOverrides): Promise<BigNumber>;

  maxFixedDiv(overrides?: CallOverrides): Promise<BigNumber>;

  maxFixedDivisor(overrides?: CallOverrides): Promise<BigNumber>;

  maxFixedMul(overrides?: CallOverrides): Promise<BigNumber>;

  maxFixedSub(overrides?: CallOverrides): Promise<BigNumber>;

  maxInt256(overrides?: CallOverrides): Promise<BigNumber>;

  maxNewFixed(overrides?: CallOverrides): Promise<BigNumber>;

  minInt256(overrides?: CallOverrides): Promise<BigNumber>;

  minNewFixed(overrides?: CallOverrides): Promise<BigNumber>;

  mulPrecision(overrides?: CallOverrides): Promise<BigNumber>;

  multiply(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "newFixed(int256)"(
    x: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "newFixed(int256,uint8)"(
    x: BigNumberish,
    _originDigits: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  newFixedFraction(
    numerator: BigNumberish,
    denominator: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  reciprocal(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  subtract(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    abs(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    add(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertFixed(
      x: BigNumberish,
      _originDigits: BigNumberish,
      _destinationDigits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    digits(overrides?: CallOverrides): Promise<number>;

    divide(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fixed1(overrides?: CallOverrides): Promise<BigNumber>;

    fractional(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "fromFixed(int256)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "fromFixed(int256,uint8)"(
      x: BigNumberish,
      _destinationDigits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    integer(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    maxFixedAdd(overrides?: CallOverrides): Promise<BigNumber>;

    maxFixedDiv(overrides?: CallOverrides): Promise<BigNumber>;

    maxFixedDivisor(overrides?: CallOverrides): Promise<BigNumber>;

    maxFixedMul(overrides?: CallOverrides): Promise<BigNumber>;

    maxFixedSub(overrides?: CallOverrides): Promise<BigNumber>;

    maxInt256(overrides?: CallOverrides): Promise<BigNumber>;

    maxNewFixed(overrides?: CallOverrides): Promise<BigNumber>;

    minInt256(overrides?: CallOverrides): Promise<BigNumber>;

    minNewFixed(overrides?: CallOverrides): Promise<BigNumber>;

    mulPrecision(overrides?: CallOverrides): Promise<BigNumber>;

    multiply(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "newFixed(int256)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "newFixed(int256,uint8)"(
      x: BigNumberish,
      _originDigits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newFixedFraction(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reciprocal(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    subtract(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    abs(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    add(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertFixed(
      x: BigNumberish,
      _originDigits: BigNumberish,
      _destinationDigits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    digits(overrides?: CallOverrides): Promise<BigNumber>;

    divide(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fixed1(overrides?: CallOverrides): Promise<BigNumber>;

    fractional(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "fromFixed(int256)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "fromFixed(int256,uint8)"(
      x: BigNumberish,
      _destinationDigits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    integer(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    maxFixedAdd(overrides?: CallOverrides): Promise<BigNumber>;

    maxFixedDiv(overrides?: CallOverrides): Promise<BigNumber>;

    maxFixedDivisor(overrides?: CallOverrides): Promise<BigNumber>;

    maxFixedMul(overrides?: CallOverrides): Promise<BigNumber>;

    maxFixedSub(overrides?: CallOverrides): Promise<BigNumber>;

    maxInt256(overrides?: CallOverrides): Promise<BigNumber>;

    maxNewFixed(overrides?: CallOverrides): Promise<BigNumber>;

    minInt256(overrides?: CallOverrides): Promise<BigNumber>;

    minNewFixed(overrides?: CallOverrides): Promise<BigNumber>;

    mulPrecision(overrides?: CallOverrides): Promise<BigNumber>;

    multiply(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "newFixed(int256)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "newFixed(int256,uint8)"(
      x: BigNumberish,
      _originDigits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newFixedFraction(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reciprocal(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    subtract(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    abs(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    add(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertFixed(
      x: BigNumberish,
      _originDigits: BigNumberish,
      _destinationDigits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    digits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    divide(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fixed1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fractional(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "fromFixed(int256)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "fromFixed(int256,uint8)"(
      x: BigNumberish,
      _destinationDigits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    integer(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxFixedAdd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxFixedDiv(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxFixedDivisor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxFixedMul(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxFixedSub(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxInt256(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxNewFixed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minInt256(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minNewFixed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mulPrecision(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multiply(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "newFixed(int256)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "newFixed(int256,uint8)"(
      x: BigNumberish,
      _originDigits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newFixedFraction(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reciprocal(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    subtract(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
