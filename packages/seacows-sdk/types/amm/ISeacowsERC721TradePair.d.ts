/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ISeacowsERC721TradePairInterface extends ethers.utils.Interface {
  functions: {
    "COMPLEMENT_PRECISION()": FunctionFragment;
    "MAX_PROTOCOL_FEE_PERCENT()": FunctionFragment;
    "ONE_PERCENT()": FunctionFragment;
    "PERCENTAGE_PRECISION()": FunctionFragment;
    "POINT_FIVE_PERCENT()": FunctionFragment;
    "balanceOf(uint256)": FunctionFragment;
    "burn(address,address,uint256[])": FunctionFragment;
    "collection()": FunctionFragment;
    "feePercent()": FunctionFragment;
    "getComplemenetedAssetsOut(int256,int256)": FunctionFragment;
    "getComplementedBalance()": FunctionFragment;
    "getReserves()": FunctionFragment;
    "initialize(address,address,uint112)": FunctionFragment;
    "mint(uint256)": FunctionFragment;
    "nftComplement()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "protocolFeePercent()": FunctionFragment;
    "setProtocolFeePercent(uint256)": FunctionFragment;
    "swap(uint256,uint256[],address)": FunctionFragment;
    "token()": FunctionFragment;
    "tokenComplement()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "updatePositionFee(uint256)": FunctionFragment;
    "updatePositionFeeDebt(uint256)": FunctionFragment;
    "updateSwapFee()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "COMPLEMENT_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PROTOCOL_FEE_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ONE_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERCENTAGE_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POINT_FIVE_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [string, string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "collection",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getComplemenetedAssetsOut",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getComplementedBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "mint", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "nftComplement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [BigNumberish, BigNumberish[], string]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenComplement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updatePositionFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePositionFeeDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSwapFee",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "COMPLEMENT_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PROTOCOL_FEE_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ONE_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERCENTAGE_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POINT_FIVE_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collection", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feePercent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getComplemenetedAssetsOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComplementedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftComplement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenComplement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePositionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePositionFeeDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSwapFee",
    data: BytesLike
  ): Result;

  events: {
    "Burn(address,uint256,uint256,uint256,uint256,uint256[],address)": EventFragment;
    "CollectFee(uint256,uint256)": EventFragment;
    "Mint(address,uint256,uint256)": EventFragment;
    "Swap(address,uint256,uint256,uint256,uint256,address)": EventFragment;
    "Sync(uint112,uint112)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sync"): EventFragment;
}

export type BurnEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber[], string] & {
    sender: string;
    cTokenOut: BigNumber;
    cNftOut: BigNumber;
    tokenAmountIn: BigNumber;
    tokenAmountOut: BigNumber;
    idsOut: BigNumber[];
    to: string;
  }
>;

export type CollectFeeEvent = TypedEvent<
  [BigNumber, BigNumber] & { tokenId: BigNumber; fee: BigNumber }
>;

export type MintEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    sender: string;
    tokenAmount: BigNumber;
    nftAmount: BigNumber;
  }
>;

export type SwapEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
    sender: string;
    tokenIn: BigNumber;
    nftIn: BigNumber;
    tokenOut: BigNumber;
    nftOut: BigNumber;
    to: string;
  }
>;

export type SyncEvent = TypedEvent<
  [BigNumber, BigNumber] & { reserve0: BigNumber; reserve1: BigNumber }
>;

export class ISeacowsERC721TradePair extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ISeacowsERC721TradePairInterface;

  functions: {
    COMPLEMENT_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_PROTOCOL_FEE_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    ONE_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    PERCENTAGE_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    POINT_FIVE_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    burn(
      from: string,
      to: string,
      ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collection(overrides?: CallOverrides): Promise<[string]>;

    feePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    getComplemenetedAssetsOut(
      _tokenAmountOut: BigNumberish,
      _nftAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        tokenAmountOut: BigNumber;
        nftAmountOut: BigNumber;
        newTokenComplement: BigNumber;
        newNftComplement: BigNumber;
      }
    >;

    getComplementedBalance(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokenBalance: BigNumber;
        nftBalance: BigNumber;
      }
    >;

    getReserves(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        _reserve0: BigNumber;
        _reserve1: BigNumber;
        _blockTimestampLast: number;
      }
    >;

    initialize(
      _collection: string,
      _token: string,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mint(
      toTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nftComplement(overrides?: CallOverrides): Promise<[BigNumber]>;

    ownerOf(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    protocolFeePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    setProtocolFeePercent(
      _protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swap(
      tokenAmountOut: BigNumberish,
      idsOut: BigNumberish[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    tokenComplement(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    updatePositionFee(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePositionFeeDebt(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSwapFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  COMPLEMENT_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_PROTOCOL_FEE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  ONE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  PERCENTAGE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  POINT_FIVE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  burn(
    from: string,
    to: string,
    ids: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collection(overrides?: CallOverrides): Promise<string>;

  feePercent(overrides?: CallOverrides): Promise<BigNumber>;

  getComplemenetedAssetsOut(
    _tokenAmountOut: BigNumberish,
    _nftAmountOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      tokenAmountOut: BigNumber;
      nftAmountOut: BigNumber;
      newTokenComplement: BigNumber;
      newNftComplement: BigNumber;
    }
  >;

  getComplementedBalance(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { tokenBalance: BigNumber; nftBalance: BigNumber }
  >;

  getReserves(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number] & {
      _reserve0: BigNumber;
      _reserve1: BigNumber;
      _blockTimestampLast: number;
    }
  >;

  initialize(
    _collection: string,
    _token: string,
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mint(
    toTokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nftComplement(overrides?: CallOverrides): Promise<BigNumber>;

  ownerOf(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  protocolFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

  setProtocolFeePercent(
    _protocolFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swap(
    tokenAmountOut: BigNumberish,
    idsOut: BigNumberish[],
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  tokenComplement(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  updatePositionFee(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePositionFeeDebt(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSwapFee(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    COMPLEMENT_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PROTOCOL_FEE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENTAGE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    POINT_FIVE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      from: string,
      to: string,
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber[]] & {
        cTokenOut: BigNumber;
        cNftOut: BigNumber;
        tokenIn: BigNumber;
        tokenOut: BigNumber;
        idsOut: BigNumber[];
      }
    >;

    collection(overrides?: CallOverrides): Promise<string>;

    feePercent(overrides?: CallOverrides): Promise<BigNumber>;

    getComplemenetedAssetsOut(
      _tokenAmountOut: BigNumberish,
      _nftAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        tokenAmountOut: BigNumber;
        nftAmountOut: BigNumber;
        newTokenComplement: BigNumber;
        newNftComplement: BigNumber;
      }
    >;

    getComplementedBalance(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokenBalance: BigNumber;
        nftBalance: BigNumber;
      }
    >;

    getReserves(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        _reserve0: BigNumber;
        _reserve1: BigNumber;
        _blockTimestampLast: number;
      }
    >;

    initialize(
      _collection: string,
      _token: string,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mint(
      toTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftComplement(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    protocolFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    setProtocolFeePercent(
      _protocolFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swap(
      tokenAmountOut: BigNumberish,
      idsOut: BigNumberish[],
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    tokenComplement(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    updatePositionFee(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePositionFeeDebt(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSwapFee(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Burn(address,uint256,uint256,uint256,uint256,uint256[],address)"(
      sender?: string | null,
      cTokenOut?: null,
      cNftOut?: null,
      tokenAmountIn?: null,
      tokenAmountOut?: null,
      idsOut?: null,
      to?: string | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber[], string],
      {
        sender: string;
        cTokenOut: BigNumber;
        cNftOut: BigNumber;
        tokenAmountIn: BigNumber;
        tokenAmountOut: BigNumber;
        idsOut: BigNumber[];
        to: string;
      }
    >;

    Burn(
      sender?: string | null,
      cTokenOut?: null,
      cNftOut?: null,
      tokenAmountIn?: null,
      tokenAmountOut?: null,
      idsOut?: null,
      to?: string | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber[], string],
      {
        sender: string;
        cTokenOut: BigNumber;
        cNftOut: BigNumber;
        tokenAmountIn: BigNumber;
        tokenAmountOut: BigNumber;
        idsOut: BigNumber[];
        to: string;
      }
    >;

    "CollectFee(uint256,uint256)"(
      tokenId?: BigNumberish | null,
      fee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { tokenId: BigNumber; fee: BigNumber }
    >;

    CollectFee(
      tokenId?: BigNumberish | null,
      fee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { tokenId: BigNumber; fee: BigNumber }
    >;

    "Mint(address,uint256,uint256)"(
      sender?: string | null,
      tokenAmount?: null,
      nftAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sender: string; tokenAmount: BigNumber; nftAmount: BigNumber }
    >;

    Mint(
      sender?: string | null,
      tokenAmount?: null,
      nftAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sender: string; tokenAmount: BigNumber; nftAmount: BigNumber }
    >;

    "Swap(address,uint256,uint256,uint256,uint256,address)"(
      sender?: string | null,
      tokenIn?: null,
      nftIn?: null,
      tokenOut?: null,
      nftOut?: null,
      to?: string | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, string],
      {
        sender: string;
        tokenIn: BigNumber;
        nftIn: BigNumber;
        tokenOut: BigNumber;
        nftOut: BigNumber;
        to: string;
      }
    >;

    Swap(
      sender?: string | null,
      tokenIn?: null,
      nftIn?: null,
      tokenOut?: null,
      nftOut?: null,
      to?: string | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, string],
      {
        sender: string;
        tokenIn: BigNumber;
        nftIn: BigNumber;
        tokenOut: BigNumber;
        nftOut: BigNumber;
        to: string;
      }
    >;

    "Sync(uint112,uint112)"(
      reserve0?: null,
      reserve1?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { reserve0: BigNumber; reserve1: BigNumber }
    >;

    Sync(
      reserve0?: null,
      reserve1?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { reserve0: BigNumber; reserve1: BigNumber }
    >;
  };

  estimateGas: {
    COMPLEMENT_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PROTOCOL_FEE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENTAGE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    POINT_FIVE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      from: string,
      to: string,
      ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collection(overrides?: CallOverrides): Promise<BigNumber>;

    feePercent(overrides?: CallOverrides): Promise<BigNumber>;

    getComplemenetedAssetsOut(
      _tokenAmountOut: BigNumberish,
      _nftAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getComplementedBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getReserves(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _collection: string,
      _token: string,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mint(
      toTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nftComplement(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protocolFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    setProtocolFeePercent(
      _protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swap(
      tokenAmountOut: BigNumberish,
      idsOut: BigNumberish[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    tokenComplement(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    updatePositionFee(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePositionFeeDebt(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSwapFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    COMPLEMENT_PRECISION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_PROTOCOL_FEE_PERCENT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ONE_PERCENT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERCENTAGE_PRECISION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    POINT_FIVE_PERCENT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      from: string,
      to: string,
      ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collection(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getComplemenetedAssetsOut(
      _tokenAmountOut: BigNumberish,
      _nftAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getComplementedBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _collection: string,
      _token: string,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mint(
      toTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nftComplement(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolFeePercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setProtocolFeePercent(
      _protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      tokenAmountOut: BigNumberish,
      idsOut: BigNumberish[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenComplement(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updatePositionFee(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePositionFeeDebt(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSwapFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
