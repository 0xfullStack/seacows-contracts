/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MockSeacowsComplementInterface extends ethers.utils.Interface {
  functions: {
    "COMPLEMENT_PRECISION()": FunctionFragment;
    "COMPLEMENT_THRESHOLD()": FunctionFragment;
    "complements()": FunctionFragment;
    "getComplemenetedAssetsOut(uint256,uint256)": FunctionFragment;
    "getComplementedBalance(address,address)": FunctionFragment;
    "nftAmountOut()": FunctionFragment;
    "nftComplement()": FunctionFragment;
    "tokenAmountOut()": FunctionFragment;
    "tokenComplement()": FunctionFragment;
    "updateComplement(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "COMPLEMENT_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COMPLEMENT_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "complements",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getComplemenetedAssetsOut",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getComplementedBalance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "nftAmountOut",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftComplement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenAmountOut",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenComplement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateComplement",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "COMPLEMENT_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COMPLEMENT_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "complements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComplemenetedAssetsOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComplementedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftComplement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenComplement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateComplement",
    data: BytesLike
  ): Result;

  events: {};
}

export class MockSeacowsComplement extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MockSeacowsComplementInterface;

  functions: {
    COMPLEMENT_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    COMPLEMENT_THRESHOLD(overrides?: CallOverrides): Promise<[BigNumber]>;

    complements(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _tokenComplement: BigNumber;
        _nftComplement: BigNumber;
      }
    >;

    getComplemenetedAssetsOut(
      __tokenAmountOut: BigNumberish,
      __nftAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        tokenAmountOut: BigNumber;
        nftAmountOut: BigNumber;
        newTokenComplement: BigNumber;
        newNftComplement: BigNumber;
      }
    >;

    getComplementedBalance(
      _token: string,
      _collection: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { balance0: BigNumber; balance1: BigNumber }
    >;

    nftAmountOut(overrides?: CallOverrides): Promise<[BigNumber]>;

    nftComplement(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenAmountOut(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenComplement(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateComplement(
      _amount0Out: BigNumberish,
      _amount1Out: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  COMPLEMENT_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  COMPLEMENT_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

  complements(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      _tokenComplement: BigNumber;
      _nftComplement: BigNumber;
    }
  >;

  getComplemenetedAssetsOut(
    __tokenAmountOut: BigNumberish,
    __nftAmountOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      tokenAmountOut: BigNumber;
      nftAmountOut: BigNumber;
      newTokenComplement: BigNumber;
      newNftComplement: BigNumber;
    }
  >;

  getComplementedBalance(
    _token: string,
    _collection: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { balance0: BigNumber; balance1: BigNumber }
  >;

  nftAmountOut(overrides?: CallOverrides): Promise<BigNumber>;

  nftComplement(overrides?: CallOverrides): Promise<BigNumber>;

  tokenAmountOut(overrides?: CallOverrides): Promise<BigNumber>;

  tokenComplement(overrides?: CallOverrides): Promise<BigNumber>;

  updateComplement(
    _amount0Out: BigNumberish,
    _amount1Out: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    COMPLEMENT_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    COMPLEMENT_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    complements(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _tokenComplement: BigNumber;
        _nftComplement: BigNumber;
      }
    >;

    getComplemenetedAssetsOut(
      __tokenAmountOut: BigNumberish,
      __nftAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        tokenAmountOut: BigNumber;
        nftAmountOut: BigNumber;
        newTokenComplement: BigNumber;
        newNftComplement: BigNumber;
      }
    >;

    getComplementedBalance(
      _token: string,
      _collection: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { balance0: BigNumber; balance1: BigNumber }
    >;

    nftAmountOut(overrides?: CallOverrides): Promise<BigNumber>;

    nftComplement(overrides?: CallOverrides): Promise<BigNumber>;

    tokenAmountOut(overrides?: CallOverrides): Promise<BigNumber>;

    tokenComplement(overrides?: CallOverrides): Promise<BigNumber>;

    updateComplement(
      _amount0Out: BigNumberish,
      _amount1Out: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    COMPLEMENT_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    COMPLEMENT_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    complements(overrides?: CallOverrides): Promise<BigNumber>;

    getComplemenetedAssetsOut(
      __tokenAmountOut: BigNumberish,
      __nftAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getComplementedBalance(
      _token: string,
      _collection: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftAmountOut(overrides?: CallOverrides): Promise<BigNumber>;

    nftComplement(overrides?: CallOverrides): Promise<BigNumber>;

    tokenAmountOut(overrides?: CallOverrides): Promise<BigNumber>;

    tokenComplement(overrides?: CallOverrides): Promise<BigNumber>;

    updateComplement(
      _amount0Out: BigNumberish,
      _amount1Out: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    COMPLEMENT_PRECISION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    COMPLEMENT_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    complements(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getComplemenetedAssetsOut(
      __tokenAmountOut: BigNumberish,
      __nftAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getComplementedBalance(
      _token: string,
      _collection: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftAmountOut(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftComplement(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenAmountOut(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenComplement(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateComplement(
      _amount0Out: BigNumberish,
      _amount1Out: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
