/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SpeedBumpInterface extends ethers.utils.Interface {
  functions: {
    "batchRegisterNFTs(address,uint256[],address)": FunctionFragment;
    "batchWithdrawNFTs(address,uint256[])": FunctionFragment;
    "collections(address,uint256)": FunctionFragment;
    "eths(address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "positionManager()": FunctionFragment;
    "registerETH(uint256,address)": FunctionFragment;
    "registerToken(address,uint256,address)": FunctionFragment;
    "tokens(address,address)": FunctionFragment;
    "withdrawETH()": FunctionFragment;
    "withdrawToken(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "batchRegisterNFTs",
    values: [string, BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "batchWithdrawNFTs",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "collections",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "eths", values: [string]): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "positionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerETH",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerToken",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokens",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchRegisterNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchWithdrawNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "eths", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "RegisterETH(address,uint256)": EventFragment;
    "RegisterNFTs(address,address,uint256[])": EventFragment;
    "RegisterToken(address,address,uint256)": EventFragment;
    "WithdrawETH(address,uint256)": EventFragment;
    "WithdrawNFTs(address,address,uint256[])": EventFragment;
    "WithdrawToken(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisterETH"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisterNFTs"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisterToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawETH"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawNFTs"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawToken"): EventFragment;
}

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type RegisterETHEvent = TypedEvent<
  [string, BigNumber] & { owner: string; amount: BigNumber }
>;

export type RegisterNFTsEvent = TypedEvent<
  [string, string, BigNumber[]] & {
    owner: string;
    collection: string;
    tokenIds: BigNumber[];
  }
>;

export type RegisterTokenEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    token: string;
    amount: BigNumber;
  }
>;

export type WithdrawETHEvent = TypedEvent<
  [string, BigNumber] & { sender: string; amount: BigNumber }
>;

export type WithdrawNFTsEvent = TypedEvent<
  [string, string, BigNumber[]] & {
    sender: string;
    collection: string;
    tokenIds: BigNumber[];
  }
>;

export type WithdrawTokenEvent = TypedEvent<
  [string, string, BigNumber] & {
    sender: string;
    token: string;
    amount: BigNumber;
  }
>;

export class SpeedBump extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SpeedBumpInterface;

  functions: {
    batchRegisterNFTs(
      collection: string,
      tokenIds: BigNumberish[],
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchWithdrawNFTs(
      collection: string,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collections(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { blockNumber: BigNumber; owner: string }>;

    eths(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { blockNumber: BigNumber; amount: BigNumber }
    >;

    initialize(
      _positionManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    positionManager(overrides?: CallOverrides): Promise<[string]>;

    registerETH(
      amount: BigNumberish,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerToken(
      token: string,
      amount: BigNumberish,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokens(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { blockNumber: BigNumber; amount: BigNumber }
    >;

    withdrawETH(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  batchRegisterNFTs(
    collection: string,
    tokenIds: BigNumberish[],
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchWithdrawNFTs(
    collection: string,
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collections(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { blockNumber: BigNumber; owner: string }>;

  eths(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { blockNumber: BigNumber; amount: BigNumber }
  >;

  initialize(
    _positionManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  positionManager(overrides?: CallOverrides): Promise<string>;

  registerETH(
    amount: BigNumberish,
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerToken(
    token: string,
    amount: BigNumberish,
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokens(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { blockNumber: BigNumber; amount: BigNumber }
  >;

  withdrawETH(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawToken(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    batchRegisterNFTs(
      collection: string,
      tokenIds: BigNumberish[],
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    batchWithdrawNFTs(
      collection: string,
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    collections(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { blockNumber: BigNumber; owner: string }>;

    eths(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { blockNumber: BigNumber; amount: BigNumber }
    >;

    initialize(
      _positionManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    positionManager(overrides?: CallOverrides): Promise<string>;

    registerETH(
      amount: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registerToken(
      token: string,
      amount: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tokens(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { blockNumber: BigNumber; amount: BigNumber }
    >;

    withdrawETH(overrides?: CallOverrides): Promise<void>;

    withdrawToken(token: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "RegisterETH(address,uint256)"(
      owner?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { owner: string; amount: BigNumber }
    >;

    RegisterETH(
      owner?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { owner: string; amount: BigNumber }
    >;

    "RegisterNFTs(address,address,uint256[])"(
      owner?: string | null,
      collection?: string | null,
      tokenIds?: null
    ): TypedEventFilter<
      [string, string, BigNumber[]],
      { owner: string; collection: string; tokenIds: BigNumber[] }
    >;

    RegisterNFTs(
      owner?: string | null,
      collection?: string | null,
      tokenIds?: null
    ): TypedEventFilter<
      [string, string, BigNumber[]],
      { owner: string; collection: string; tokenIds: BigNumber[] }
    >;

    "RegisterToken(address,address,uint256)"(
      owner?: string | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; token: string; amount: BigNumber }
    >;

    RegisterToken(
      owner?: string | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; token: string; amount: BigNumber }
    >;

    "WithdrawETH(address,uint256)"(
      sender?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { sender: string; amount: BigNumber }
    >;

    WithdrawETH(
      sender?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { sender: string; amount: BigNumber }
    >;

    "WithdrawNFTs(address,address,uint256[])"(
      sender?: string | null,
      collection?: string | null,
      tokenIds?: null
    ): TypedEventFilter<
      [string, string, BigNumber[]],
      { sender: string; collection: string; tokenIds: BigNumber[] }
    >;

    WithdrawNFTs(
      sender?: string | null,
      collection?: string | null,
      tokenIds?: null
    ): TypedEventFilter<
      [string, string, BigNumber[]],
      { sender: string; collection: string; tokenIds: BigNumber[] }
    >;

    "WithdrawToken(address,address,uint256)"(
      sender?: string | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; token: string; amount: BigNumber }
    >;

    WithdrawToken(
      sender?: string | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; token: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    batchRegisterNFTs(
      collection: string,
      tokenIds: BigNumberish[],
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchWithdrawNFTs(
      collection: string,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collections(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eths(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _positionManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    positionManager(overrides?: CallOverrides): Promise<BigNumber>;

    registerETH(
      amount: BigNumberish,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerToken(
      token: string,
      amount: BigNumberish,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokens(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawETH(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    batchRegisterNFTs(
      collection: string,
      tokenIds: BigNumberish[],
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchWithdrawNFTs(
      collection: string,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collections(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eths(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _positionManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    positionManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerETH(
      amount: BigNumberish,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerToken(
      token: string,
      amount: BigNumberish,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokens(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawETH(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
