/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { SeacowsErrors, SeacowsErrorsInterface } from "../SeacowsErrors";

const _abi = [
  {
    inputs: [],
    name: "FM_NON_FEE_MANAGER",
    type: "error",
  },
  {
    inputs: [],
    name: "FM_NON_ROYALTY_FEE_MANAGER",
    type: "error",
  },
  {
    inputs: [],
    name: "RM_NON_ROYALTY_FEE_MANAGER",
    type: "error",
  },
  {
    inputs: [],
    name: "SPMD_ONLY_POSITION_MANAGER",
    type: "error",
  },
  {
    inputs: [],
    name: "SPM_BELOW_NFT_OUT_MIN_CONSTRAINT",
    type: "error",
  },
  {
    inputs: [],
    name: "SPM_BELOW_TOKEN_OUT_MIN_CONSTRAINT",
    type: "error",
  },
  {
    inputs: [],
    name: "SPM_ETH_TRANSFER_FAILED",
    type: "error",
  },
  {
    inputs: [],
    name: "SPM_EXPIRED",
    type: "error",
  },
  {
    inputs: [],
    name: "SPM_INSUFFICIENT_AMOUNT",
    type: "error",
  },
  {
    inputs: [],
    name: "SPM_INSUFFICIENT_LIQUIDITY",
    type: "error",
  },
  {
    inputs: [],
    name: "SPM_INSUFFICIENT_MINIMUM_LIQUIDITY_AMOUNT",
    type: "error",
  },
  {
    inputs: [],
    name: "SPM_INVALID_TOKEN_ID",
    type: "error",
  },
  {
    inputs: [],
    name: "SPM_ONLY_BURNABLE_WHEN_CLEARED",
    type: "error",
  },
  {
    inputs: [],
    name: "SPM_ONLY_PAIR_CAN_BURN",
    type: "error",
  },
  {
    inputs: [],
    name: "SPM_ONLY_PAIR_CAN_MINT",
    type: "error",
  },
  {
    inputs: [],
    name: "SPM_PAIR_NOT_EXIST",
    type: "error",
  },
  {
    inputs: [],
    name: "SPM_TOKEN_TRANSFER_FAILED",
    type: "error",
  },
  {
    inputs: [],
    name: "SSB_ETH_TRANSFER_FAILED",
    type: "error",
  },
  {
    inputs: [],
    name: "SSB_INSUFFICIENT_AMOUNT",
    type: "error",
  },
  {
    inputs: [],
    name: "SSB_ONE_MORE_BLOCK_AT_LEAST",
    type: "error",
  },
  {
    inputs: [],
    name: "SSB_UNAUTHORIZED",
    type: "error",
  },
  {
    inputs: [],
    name: "STPF_PAIR_ALREADY_EXIST",
    type: "error",
  },
  {
    inputs: [],
    name: "STPF_ZERO_ADDRESS",
    type: "error",
  },
  {
    inputs: [],
    name: "STP_EXCEED_NFT_OUT_MAX",
    type: "error",
  },
  {
    inputs: [],
    name: "STP_FEE_OUT_OF_RANGE",
    type: "error",
  },
  {
    inputs: [],
    name: "STP_INSUFFICIENT_INPUT_AMOUNT",
    type: "error",
  },
  {
    inputs: [],
    name: "STP_INSUFFICIENT_LIQUIDITY",
    type: "error",
  },
  {
    inputs: [],
    name: "STP_INSUFFICIENT_LIQUIDITY_BURNED",
    type: "error",
  },
  {
    inputs: [],
    name: "STP_INSUFFICIENT_LIQUIDITY_MINTED",
    type: "error",
  },
  {
    inputs: [],
    name: "STP_INSUFFICIENT_MIN_FEE",
    type: "error",
  },
  {
    inputs: [],
    name: "STP_INSUFFICIENT_NFT_TO_WITHDRAW",
    type: "error",
  },
  {
    inputs: [],
    name: "STP_INSUFFICIENT_OUTPUT_AMOUNT",
    type: "error",
  },
  {
    inputs: [],
    name: "STP_INVALID_FEE",
    type: "error",
  },
  {
    inputs: [],
    name: "STP_INVALID_TO",
    type: "error",
  },
  {
    inputs: [],
    name: "STP_K",
    type: "error",
  },
  {
    inputs: [],
    name: "STP_SKIM_QUANTITY_MISMATCH",
    type: "error",
  },
  {
    inputs: [],
    name: "STP_UNAUTHORIZED",
    type: "error",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220b9d53278f81270c9d4fd7254a24838a5800410ba062d916f1db9980b3895cfe964736f6c634300080d0033";

export class SeacowsErrors__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SeacowsErrors> {
    return super.deploy(overrides || {}) as Promise<SeacowsErrors>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SeacowsErrors {
    return super.attach(address) as SeacowsErrors;
  }
  connect(signer: Signer): SeacowsErrors__factory {
    return super.connect(signer) as SeacowsErrors__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SeacowsErrorsInterface {
    return new utils.Interface(_abi) as SeacowsErrorsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SeacowsErrors {
    return new Contract(address, _abi, signerOrProvider) as SeacowsErrors;
  }
}
