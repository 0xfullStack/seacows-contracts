/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockSeacowsComplement,
  MockSeacowsComplementInterface,
} from "../MockSeacowsComplement";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "COMPLEMENT_PRECISION",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "COMPLEMENT_THRESHOLD",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "complements",
    outputs: [
      {
        internalType: "int256",
        name: "_tokenComplement",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "_nftComplement",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "__tokenAmountOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "__nftAmountOut",
        type: "uint256",
      },
    ],
    name: "getComplemenetedAssetsOut",
    outputs: [
      {
        internalType: "int256",
        name: "tokenAmountOut",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "nftAmountOut",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "newTokenComplement",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "newNftComplement",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address",
        name: "_collection",
        type: "address",
      },
    ],
    name: "getComplementedBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "balance0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "balance1",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nftAmountOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nftComplement",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenAmountOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenComplement",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount0Out",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_amount1Out",
        type: "uint256",
      },
    ],
    name: "updateComplement",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506105e1806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80639208df5e116100665780639208df5e146101375780639a2fe1bd146101405780639e75baa7146101485780639e7ef4c614610157578063a4ac5c1d1461016357600080fd5b806309b35e5d146100a35780632c586d9c146100bf578063568f771a146100e7578063670dfa14146100ef57806369eedcde14610104575b600080fd5b6100ac60035481565b6040519081526020015b60405180910390f35b6100d26100cd366004610458565b61016b565b604080519283526020830191909152016100b6565b6100d2610183565b6101026100fd366004610482565b6101a0565b005b610117610112366004610482565b6101b5565b6040805194855260208501939093529183015260608201526080016100b6565b6100ac60025481565b6001546100ac565b6100ac670de0b6b3a764000081565b6100ac64b1a2bc2ec581565b6000546100ac565b60008061017884846102dd565b915091509250929050565b60008061018f60005490565b915061019a60015490565b90509091565b6101aa82826103ec565b600355600255505050565b600080600080600086905060008690506000816001546101d591906104ba565b9050670de0b6b3a76400006000816101ed81856104e2565b6101f7919061051e565b905060006102058285610554565b905064b1a2bc2ec5811261021f5761021d83836104ba565b505b82821261029c57819850600085836102379190610554565b9050806001546102479190610554565b9750600086610256898461051e565b61026091906104e2565b90506000811315610279576102766001826104ba565b90505b6102838189610554565b9b50806000546102939190610554565b995050506102ce565b846001546102aa91906104ba565b6000995096506102bb86600261051e565b9950856000546102cb9190610554565b97505b50505050505092959194509250565b600080546040516370a0823160e01b81523060048201528291906001600160a01b038616906370a0823190602401602060405180830381865afa158015610328573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034c919061057b565b6103569190610554565b6001546040516370a0823160e01b815230600482015291935090670de0b6b3a7640000906001600160a01b038616906370a0823190602401602060405180830381865afa1580156103ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103cf919061057b565b6103d99190610594565b6103e39190610554565b90509250929050565b60008060008060006103fe87876101b5565b600155600090815591935091508212156104285761041d826000610554565b945060009350610430565b600094508193505b80925050509250925092565b80356001600160a01b038116811461045357600080fd5b919050565b6000806040838503121561046b57600080fd5b6104748361043c565b91506103e36020840161043c565b6000806040838503121561049557600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b80820182811260008312801582168215821617156104da576104da6104a4565b505092915050565b6000826104ff57634e487b7160e01b600052601260045260246000fd5b600160ff1b821460001984141615610519576105196104a4565b500590565b80820260008212600160ff1b8414161561053a5761053a6104a4565b818105831482151761054e5761054e6104a4565b92915050565b8181036000831280158383131683831282161715610574576105746104a4565b5092915050565b60006020828403121561058d57600080fd5b5051919050565b808202811582820484141761054e5761054e6104a456fea264697066735822122032aa0c0985acc9b9924c05c49bb9bd5d545698eea70e3ed9ad703dd5cd7dd78e64736f6c63430008120033";

export class MockSeacowsComplement__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockSeacowsComplement> {
    return super.deploy(overrides || {}) as Promise<MockSeacowsComplement>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockSeacowsComplement {
    return super.attach(address) as MockSeacowsComplement;
  }
  connect(signer: Signer): MockSeacowsComplement__factory {
    return super.connect(signer) as MockSeacowsComplement__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockSeacowsComplementInterface {
    return new utils.Interface(_abi) as MockSeacowsComplementInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockSeacowsComplement {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockSeacowsComplement;
  }
}
