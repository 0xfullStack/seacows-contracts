/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockSeacowsComplement,
  MockSeacowsComplementInterface,
} from "../MockSeacowsComplement";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "COMPLEMENT_PRECISION",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "COMPLEMENT_THRESHOLD",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "complements",
    outputs: [
      {
        internalType: "int256",
        name: "_tokenComplement",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "_nftComplement",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "_tokenAmountOut",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "_nftAmountOut",
        type: "int256",
      },
    ],
    name: "getComplemenetedAssetsOut",
    outputs: [
      {
        internalType: "int256",
        name: "tokenAmountOut",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "nftAmountOut",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "newTokenComplement",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "newNftComplement",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address",
        name: "_collection",
        type: "address",
      },
    ],
    name: "getComplementedBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "balance0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "balance1",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nftAmountOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nftComplement",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenAmountOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenComplement",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount0Out",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_amount1Out",
        type: "uint256",
      },
    ],
    name: "updateComplement",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506105c5806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80639208df5e116100665780639208df5e146101375780639a2fe1bd146101405780639e75baa7146101485780639e7ef4c614610157578063a4ac5c1d1461016657600080fd5b806309b35e5d146100a35780632c586d9c146100bf578063568f771a146100e75780635b8d14da146100ef578063670dfa1414610122575b600080fd5b6100ac60035481565b6040519081526020015b60405180910390f35b6100d26100cd36600461043c565b61016e565b604080519283526020830191909152016100b6565b6100d2610186565b6101026100fd366004610466565b6101a3565b6040805194855260208501939093529183015260608201526080016100b6565b610135610130366004610466565b6102ac565b005b6100ac60025481565b6001546100ac565b6100ac670de0b6b3a764000081565b6100ac6706f05b59d3b2000081565b6000546100ac565b60008061017b84846102c1565b915091509250929050565b60008061019260005490565b915061019d60015490565b90509091565b6000806000806000856001546101b9919061049e565b9050670de0b6b3a76400006000816101d181856104c6565b6101db9190610502565b905060006101e98285610538565b90506706f05b59d3b20000811261020757610204838361049e565b91505b82821261026d578196506000898861021f9190610538565b90508060015461022f919061049e565b955060008a61023e8d84610502565b61024891906104c6565b9050610254818d610538565b9950806000546102649190610538565b9750505061029f565b8860015461027b9190610538565b60009750945061028c8a6002610502565b97508960005461029c919061049e565b95505b5050505092959194509250565b6102b682826103d0565b600355600255505050565b600080546040516370a0823160e01b81523060048201528291906001600160a01b038616906370a0823190602401602060405180830381865afa15801561030c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610330919061055f565b61033a919061049e565b6001546040516370a0823160e01b815230600482015291935090670de0b6b3a7640000906001600160a01b038616906370a0823190602401602060405180830381865afa15801561038f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b3919061055f565b6103bd9190610578565b6103c7919061049e565b90509250929050565b60008060008060006103e287876101a3565b6001556000908155919350915082121561040c57610401826000610538565b945060009350610414565b600094508193505b80925050509250925092565b80356001600160a01b038116811461043757600080fd5b919050565b6000806040838503121561044f57600080fd5b61045883610420565b91506103c760208401610420565b6000806040838503121561047957600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b80820182811260008312801582168215821617156104be576104be610488565b505092915050565b6000826104e357634e487b7160e01b600052601260045260246000fd5b600160ff1b8214600019841416156104fd576104fd610488565b500590565b80820260008212600160ff1b8414161561051e5761051e610488565b818105831482151761053257610532610488565b92915050565b818103600083128015838313168383128216171561055857610558610488565b5092915050565b60006020828403121561057157600080fd5b5051919050565b80820281158282048414176105325761053261048856fea264697066735822122043ebef37e8367a6bf441a850add7cca4803ee467504ccaad1e77a2eb78e7badc64736f6c63430008120033";

export class MockSeacowsComplement__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockSeacowsComplement> {
    return super.deploy(overrides || {}) as Promise<MockSeacowsComplement>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockSeacowsComplement {
    return super.attach(address) as MockSeacowsComplement;
  }
  connect(signer: Signer): MockSeacowsComplement__factory {
    return super.connect(signer) as MockSeacowsComplement__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockSeacowsComplementInterface {
    return new utils.Interface(_abi) as MockSeacowsComplementInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockSeacowsComplement {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockSeacowsComplement;
  }
}
