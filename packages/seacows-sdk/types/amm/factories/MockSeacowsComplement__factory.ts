/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockSeacowsComplement,
  MockSeacowsComplementInterface,
} from "../MockSeacowsComplement";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "COMPLEMENT_PRECISION",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "amount0Out",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "amount1Out",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "complements",
    outputs: [
      {
        internalType: "int256",
        name: "_complement0",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "_complement1",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address",
        name: "_collection",
        type: "address",
      },
    ],
    name: "getComplementedBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "balance0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "balance1",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount0Out",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_amount1Out",
        type: "uint256",
      },
    ],
    name: "updateComplement",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506104bf806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806312c6a224146100675780632c586d9c14610083578063568f771a146100ab578063670dfa14146100b65780637a97c37a146100cb5780639e75baa7146100d4575b600080fd5b61007060035481565b6040519081526020015b60405180910390f35b610096610091366004610360565b6100e3565b6040805192835260208301919091520161007a565b600054600154610096565b6100c96100c436600461038a565b6101f2565b005b61007060025481565b610070670de0b6b3a764000081565b600080546040516370a0823160e01b81523060048201528291906001600160a01b038616906370a0823190602401602060405180830381865afa15801561012e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015291906103ac565b61015c91906103db565b6001546040516370a0823160e01b8152306004820152919350906101df90670de0b6b3a7640000906001600160a01b038716906370a0823190602401602060405180830381865afa1580156101b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d991906103ac565b90610206565b6101e99190610402565b90509250929050565b6101fc828261021b565b6003556002555050565b60006102128284610415565b90505b92915050565b600080806102298585610338565b905060008460015461023b919061042c565b9050670de0b6b3a764000081106102e257610262670de0b6b3a76400006101d98382610338565b925061026e8382610402565b6001558483106102b3576000610288836101d98887610402565b90506102948188610402565b9450806000808282546102a7919061043f565b9091555061032f915050565b60006102c3836101d98689610402565b90506102cf818861042c565b9450806000808282546102a791906103db565b84600160008282546102f4919061042c565b90915550600093508390506103098684610206565b9050610315818861042c565b94508060008082825461032891906103db565b9091555050505b50509250929050565b60006102128284610467565b80356001600160a01b038116811461035b57600080fd5b919050565b6000806040838503121561037357600080fd5b61037c83610344565b91506101e960208401610344565b6000806040838503121561039d57600080fd5b50508035926020909101359150565b6000602082840312156103be57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b81810360008312801583831316838312821617156103fb576103fb6103c5565b5092915050565b81810381811115610215576102156103c5565b8082028115828204841417610215576102156103c5565b80820180821115610215576102156103c5565b808201828112600083128015821682158216171561045f5761045f6103c5565b505092915050565b60008261048457634e487b7160e01b600052601260045260246000fd5b50049056fea264697066735822122093ea94c3bdb628c3856e56ca5c9e20ec5aa3c11505e7d631f2571be96a35397a64736f6c63430008120033";

export class MockSeacowsComplement__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockSeacowsComplement> {
    return super.deploy(overrides || {}) as Promise<MockSeacowsComplement>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockSeacowsComplement {
    return super.attach(address) as MockSeacowsComplement;
  }
  connect(signer: Signer): MockSeacowsComplement__factory {
    return super.connect(signer) as MockSeacowsComplement__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockSeacowsComplementInterface {
    return new utils.Interface(_abi) as MockSeacowsComplementInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockSeacowsComplement {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockSeacowsComplement;
  }
}
