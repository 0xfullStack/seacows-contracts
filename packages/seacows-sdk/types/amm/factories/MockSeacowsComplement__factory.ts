/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockSeacowsComplement,
  MockSeacowsComplementInterface,
} from "../MockSeacowsComplement";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "COMPLEMENT_PRECISION",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "COMPLEMENT_THRESHOLD",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "complements",
    outputs: [
      {
        internalType: "int256",
        name: "_tokenComplement",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "_nftComplement",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "_tokenAmountOut",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "_nftAmountOut",
        type: "int256",
      },
    ],
    name: "getComplemenetedAssetsOut",
    outputs: [
      {
        internalType: "int256",
        name: "tokenAmountOut",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "nftAmountOut",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "newTokenComplement",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "newNftComplement",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nftAmountOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nftComplement",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenAmountOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenComplement",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount0Out",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_amount1Out",
        type: "uint256",
      },
    ],
    name: "updateComplement",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610404806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80639208df5e116100665780639208df5e146101195780639a2fe1bd146101225780639e75baa71461012a5780639e7ef4c614610139578063a4ac5c1d1461014957600080fd5b806309b35e5d14610098578063568f771a146100b45780635b8d14da146100d1578063670dfa1414610104575b600080fd5b6100a160035481565b6040519081526020015b60405180910390f35b6100bc610151565b604080519283526020830191909152016100ab565b6100e46100df3660046102d5565b61016e565b6040805194855260208501939093529183015260608201526080016100ab565b6101176101123660046102d5565b610270565b005b6100a160025481565b6001546100a1565b6100a1670de0b6b3a764000081565b6100a16706f05b59d3b1ffff1981565b6000546100a1565b60008061015d60005490565b915061016860015490565b90509091565b6000808080670de0b6b3a76400008181610188818961030d565b6101929190610349565b905060006101a0888361037f565b90506706f05b59d3b1ffff19600154826101ba91906103a6565b136101cc576101c983836103a6565b91505b82821261023257819550600088876101e4919061037f565b9050806001546101f491906103a6565b94506000896102038c84610349565b61020d919061030d565b9050610219818c61037f565b985080600054610229919061037f565b96505050610264565b87600154610240919061037f565b600096509350610251896002610349565b96508860005461026191906103a6565b94505b50505092959194509250565b61027a8282610285565b600355600255505050565b6000806000806000610297878761016e565b600155600090815591935091508212156102c1576102b682600061037f565b9450600093506102c9565b600094508193505b80925050509250925092565b600080604083850312156102e857600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b60008261032a57634e487b7160e01b600052601260045260246000fd5b600160ff1b821460001984141615610344576103446102f7565b500590565b80820260008212600160ff1b84141615610365576103656102f7565b8181058314821517610379576103796102f7565b92915050565b818103600083128015838313168383128216171561039f5761039f6102f7565b5092915050565b80820182811260008312801582168215821617156103c6576103c66102f7565b50509291505056fea26469706673582212203949cd6ec754b513074857169be87d4952573148d3ce1f644a2f4398987299ec64736f6c63430008120033";

export class MockSeacowsComplement__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockSeacowsComplement> {
    return super.deploy(overrides || {}) as Promise<MockSeacowsComplement>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockSeacowsComplement {
    return super.attach(address) as MockSeacowsComplement;
  }
  connect(signer: Signer): MockSeacowsComplement__factory {
    return super.connect(signer) as MockSeacowsComplement__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockSeacowsComplementInterface {
    return new utils.Interface(_abi) as MockSeacowsComplementInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockSeacowsComplement {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockSeacowsComplement;
  }
}
