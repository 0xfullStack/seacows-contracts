/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockSeacowsPairSwap,
  MockSeacowsPairSwapInterface,
} from "../MockSeacowsPairSwap";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "seacowsSwapCallback",
    outputs: [
      {
        internalType: "uint256",
        name: "tokenAmountIn",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "idsIn",
        type: "uint256[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pair",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenAmountOut",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "idsOut",
        type: "uint256[]",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenAmountIn",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "idsIn",
        type: "uint256[]",
      },
    ],
    name: "swap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506109c7806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806341bc698d1461003b578063a297c63814610065575b600080fd5b61004e6100493660046105a3565b61007a565b60405161005c929190610650565b60405180910390f35b610078610073366004610727565b610245565b005b600060608161008b848601866107c4565b8094508195508293505050506000336001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100fb919061081d565b90506000336001600160a01b0316637de1e5366040518163ffffffff1660e01b8152600401602060405180830381865afa15801561013d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610161919061081d565b9050841561017e5761017e6001600160a01b0383168433886102d4565b83511561023b5760005b845181101561023957816001600160a01b03166342842e0e85338885815181106101b4576101b4610841565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b15801561020e57600080fd5b505af1158015610222573d6000803e3d6000fd5b50505050808061023190610857565b915050610188565b505b5050509250929050565b856001600160a01b031663c07bff9f86868633878760405160200161026c9392919061087e565b6040516020818303038152906040526040518563ffffffff1660e01b815260040161029a9493929190610906565b600060405180830381600087803b1580156102b457600080fd5b505af11580156102c8573d6000803e3d6000fd5b50505050505050505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261032e908590610334565b50505050565b6000610389826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166104139092919063ffffffff16565b90508051600014806103aa5750808060200190518101906103aa9190610940565b61040e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084015b60405180910390fd5b505050565b6060610422848460008561042a565b949350505050565b60608247101561048b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610405565b600080866001600160a01b031685876040516104a79190610962565b60006040518083038185875af1925050503d80600081146104e4576040519150601f19603f3d011682016040523d82523d6000602084013e6104e9565b606091505b50915091506104fa87838387610505565b979650505050505050565b6060831561057457825160000361056d576001600160a01b0385163b61056d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610405565b5081610422565b61042283838151156105895781518083602001fd5b8060405162461bcd60e51b8152600401610405919061097e565b600080602083850312156105b657600080fd5b823567ffffffffffffffff808211156105ce57600080fd5b818501915085601f8301126105e257600080fd5b8135818111156105f157600080fd5b86602082850101111561060357600080fd5b60209290920196919550909350505050565b600081518084526020808501945080840160005b8381101561064557815187529582019590820190600101610629565b509495945050505050565b8281526040602082015260006104226040830184610615565b6001600160a01b038116811461067e57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126106a857600080fd5b8135602067ffffffffffffffff808311156106c5576106c5610681565b8260051b604051601f19603f830116810181811084821117156106ea576106ea610681565b60405293845285810183019383810192508785111561070857600080fd5b83870191505b848210156104fa5781358352918301919083019061070e565b60008060008060008060c0878903121561074057600080fd5b863561074b81610669565b955060208701359450604087013567ffffffffffffffff8082111561076f57600080fd5b61077b8a838b01610697565b95506060890135915061078d82610669565b9093506080880135925060a088013590808211156107aa57600080fd5b506107b789828a01610697565b9150509295509295509295565b6000806000606084860312156107d957600080fd5b83356107e481610669565b925060208401359150604084013567ffffffffffffffff81111561080757600080fd5b61081386828701610697565b9150509250925092565b60006020828403121561082f57600080fd5b815161083a81610669565b9392505050565b634e487b7160e01b600052603260045260246000fd5b60006001820161087757634e487b7160e01b600052601160045260246000fd5b5060010190565b60018060a01b03841681528260208201526060604082015260006108a56060830184610615565b95945050505050565b60005b838110156108c95781810151838201526020016108b1565b8381111561032e5750506000910152565b600081518084526108f28160208601602086016108ae565b601f01601f19169290920160200192915050565b84815260806020820152600061091f6080830186610615565b6001600160a01b038516604084015282810360608401526104fa81856108da565b60006020828403121561095257600080fd5b8151801515811461083a57600080fd5b600082516109748184602087016108ae565b9190910192915050565b60208152600061083a60208301846108da56fea2646970667358221220d8ec4cff2199b46118fd34c8fbf6b38f8fd2d70ee954b94813dc6288745e18fb64736f6c634300080d0033";

export class MockSeacowsPairSwap__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockSeacowsPairSwap> {
    return super.deploy(overrides || {}) as Promise<MockSeacowsPairSwap>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockSeacowsPairSwap {
    return super.attach(address) as MockSeacowsPairSwap;
  }
  connect(signer: Signer): MockSeacowsPairSwap__factory {
    return super.connect(signer) as MockSeacowsPairSwap__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockSeacowsPairSwapInterface {
    return new utils.Interface(_abi) as MockSeacowsPairSwapInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockSeacowsPairSwap {
    return new Contract(address, _abi, signerOrProvider) as MockSeacowsPairSwap;
  }
}
