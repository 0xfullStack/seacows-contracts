/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockSeacowsPairSwap,
  MockSeacowsPairSwapInterface,
} from "../MockSeacowsPairSwap";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "seacowsSwapCallback",
    outputs: [
      {
        internalType: "uint256",
        name: "tokenAmountIn",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "idsIn",
        type: "uint256[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pair",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenAmountOut",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "idsOut",
        type: "uint256[]",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenAmountIn",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "idsIn",
        type: "uint256[]",
      },
    ],
    name: "swap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610729806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806341bc698d1461003b578063a297c63814610065575b600080fd5b61004e61004936600461033a565b61007a565b60405161005c9291906103e7565b60405180910390f35b6100786100733660046104d1565b6102ab565b005b600060608161008b8486018661056e565b8094508195508293505050506000336001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100fb91906105c7565b90506000336001600160a01b0316637de1e5366040518163ffffffff1660e01b8152600401602060405180830381865afa15801561013d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061016191906105c7565b905084156101e4576040516323b872dd60e01b81526001600160a01b038481166004830152336024830152604482018790528316906323b872dd906064016020604051808303816000875af11580156101be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e291906105eb565b505b8351156102a15760005b845181101561029f57816001600160a01b03166342842e0e853388858151811061021a5761021a61060d565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b15801561027457600080fd5b505af1158015610288573d6000803e3d6000fd5b50505050808061029790610623565b9150506101ee565b505b5050509250929050565b856001600160a01b031663c07bff9f8686863387876040516020016102d29392919061064a565b6040516020818303038152906040526040518563ffffffff1660e01b8152600401610300949392919061067a565b600060405180830381600087803b15801561031a57600080fd5b505af115801561032e573d6000803e3d6000fd5b50505050505050505050565b6000806020838503121561034d57600080fd5b823567ffffffffffffffff8082111561036557600080fd5b818501915085601f83011261037957600080fd5b81358181111561038857600080fd5b86602082850101111561039a57600080fd5b60209290920196919550909350505050565b600081518084526020808501945080840160005b838110156103dc578151875295820195908201906001016103c0565b509495945050505050565b82815260406020820152600061040060408301846103ac565b949350505050565b6001600160a01b038116811461041d57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261044757600080fd5b8135602067ffffffffffffffff8083111561046457610464610420565b8260051b604051601f19603f8301168101818110848211171561048957610489610420565b6040529384528581018301938381019250878511156104a757600080fd5b83870191505b848210156104c6578135835291830191908301906104ad565b979650505050505050565b60008060008060008060c087890312156104ea57600080fd5b86356104f581610408565b955060208701359450604087013567ffffffffffffffff8082111561051957600080fd5b6105258a838b01610436565b95506060890135915061053782610408565b9093506080880135925060a0880135908082111561055457600080fd5b5061056189828a01610436565b9150509295509295509295565b60008060006060848603121561058357600080fd5b833561058e81610408565b925060208401359150604084013567ffffffffffffffff8111156105b157600080fd5b6105bd86828701610436565b9150509250925092565b6000602082840312156105d957600080fd5b81516105e481610408565b9392505050565b6000602082840312156105fd57600080fd5b815180151581146105e457600080fd5b634e487b7160e01b600052603260045260246000fd5b60006001820161064357634e487b7160e01b600052601160045260246000fd5b5060010190565b60018060a01b038416815282602082015260606040820152600061067160608301846103ac565b95945050505050565b8481526000602060808184015261069460808401876103ac565b6001600160a01b03861660408501528381036060850152845180825260005b818110156106ce5786810184015183820185015283016106b3565b818111156106df5760008483850101525b50601f01601f19160101969550505050505056fea2646970667358221220ae8b42bdffc457e9e3c0c5e4114eafc81f07b6c86a8af0cc07ca43998d838b4864736f6c634300080d0033";

export class MockSeacowsPairSwap__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockSeacowsPairSwap> {
    return super.deploy(overrides || {}) as Promise<MockSeacowsPairSwap>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockSeacowsPairSwap {
    return super.attach(address) as MockSeacowsPairSwap;
  }
  connect(signer: Signer): MockSeacowsPairSwap__factory {
    return super.connect(signer) as MockSeacowsPairSwap__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockSeacowsPairSwapInterface {
    return new utils.Interface(_abi) as MockSeacowsPairSwapInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockSeacowsPairSwap {
    return new Contract(address, _abi, signerOrProvider) as MockSeacowsPairSwap;
  }
}
