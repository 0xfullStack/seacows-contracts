/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  RoyaltyRegistry,
  RoyaltyRegistryInterface,
} from "../RoyaltyRegistry";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "overrideFactory",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "royaltyAddress",
        type: "address",
      },
    ],
    name: "RoyaltyOverride",
    type: "event",
  },
  {
    inputs: [],
    name: "OVERRIDE_FACTORY",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
    ],
    name: "getRoyaltyLookupAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_initialOwner",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
    ],
    name: "overrideAllowed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "royaltyLookupAddress",
        type: "address",
      },
    ],
    name: "setRoyaltyLookupAddress",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610af2380380610af283398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b608051610a616100916000396000818160d801526107780152610a616000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063715018a611610066578063715018a6146101255780638da5cb5b1461012f578063c4d66de814610140578063de5488af14610153578063f2fde38b1461016657600080fd5b806301ffc9a71461009857806326bd8982146100c0578063542770d2146100d357806370e0628114610112575b600080fd5b6100ab6100a6366004610957565b610179565b60405190151581526020015b60405180910390f35b6100ab6100ce366004610996565b6101b0565b6100fa7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100b7565b6100ab6101203660046109cf565b6102fb565b61012d61059c565b005b6033546001600160a01b03166100fa565b61012d61014e3660046109cf565b6105b0565b6100fa6101613660046109cf565b6106c3565b61012d6101743660046109cf565b6106f3565b60006001600160e01b0319821663220258eb60e21b14806101aa57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006001600160a01b0383163b151580156101e557506001600160a01b0382163b1515806101e557506001600160a01b038216155b6102265760405162461bcd60e51b815260206004820152600d60248201526c125b9d985b1a59081a5b9c1d5d609a1b60448201526064015b60405180910390fd5b61022f836102fb565b61026f5760405162461bcd60e51b815260206004820152601160248201527014195c9b5a5cdcda5bdb8819195b9a5959607a1b604482015260640161021d565b6001600160a01b03808416600090815260656020526040902080548483166001600160a01b0319821617909155167f22fb05840ad0d4b2be640c56e11065f26b799d2918d8f81190416f62b154b9c66102c661076c565b604080516001600160a01b03928316815282881660208201529186169082015260600160405180910390a15060019392505050565b600061030561076c565b6001600160a01b03166103206033546001600160a01b031690565b6001600160a01b03160361033657506001919050565b61034782632a9f3abf60e11b6107ad565b80156103cd5750816001600160a01b03166324d7806c61036561076c565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156103a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103cd91906109ec565b156103da57506001919050565b816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610434575060408051601f3d908101601f1916820190925261043191810190610a0e565b60015b156104ff5761044161076c565b6001600160a01b0316816001600160a01b0316036104625750600192915050565b6001600160a01b0381163b156104fd57806001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156104cc575060408051601f3d908101601f191682019092526104c991810190610a0e565b60015b156104fd576104d961076c565b6001600160a01b0316816001600160a01b0316036104fb575060019392505050565b505b505b816001600160a01b03166391d14854600061051861076c565b6040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401602060405180830381865afa92505050801561057e575060408051601f3d908101601f1916820190925261057b918101906109ec565b60015b156105945780156105925750600192915050565b505b506000919050565b6105a46107d0565b6105ae6000610849565b565b600054610100900460ff16158080156105d05750600054600160ff909116105b806105ea5750303b1580156105ea575060005460ff166001145b61064d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161021d565b6000805460ff191660011790558015610670576000805461ff0019166101001790555b61067982610849565b80156106bf576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6001600160a01b0380821660009081526065602052604081205490911680156106ec5792915050565b5090919050565b6106fb6107d0565b6001600160a01b0381166107605760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161021d565b61076981610849565b50565b60006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633036107a85750601f1936013590565b503390565b60006107b88361089b565b80156107c957506107c983836108ce565b9392505050565b6107d861076c565b6001600160a01b03166107f36033546001600160a01b031690565b6001600160a01b0316146105ae5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161021d565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006108ae826301ffc9a760e01b6108ce565b80156101aa57506108c7826001600160e01b03196108ce565b1592915050565b604080516001600160e01b03198316602480830191909152825180830390910181526044909101909152602080820180516001600160e01b03166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d91506000519050828015610940575060208210155b801561094c5750600081115b979650505050505050565b60006020828403121561096957600080fd5b81356001600160e01b0319811681146107c957600080fd5b6001600160a01b038116811461076957600080fd5b600080604083850312156109a957600080fd5b82356109b481610981565b915060208301356109c481610981565b809150509250929050565b6000602082840312156109e157600080fd5b81356107c981610981565b6000602082840312156109fe57600080fd5b815180151581146107c957600080fd5b600060208284031215610a2057600080fd5b81516107c98161098156fea26469706673582212204093cf8101ebdc53cd999acb53a6e141fdfe45b788f7988bb4b2e64fe0e347bf64736f6c63430008120033";

export class RoyaltyRegistry__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrideFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<RoyaltyRegistry> {
    return super.deploy(
      overrideFactory,
      overrides || {}
    ) as Promise<RoyaltyRegistry>;
  }
  getDeployTransaction(
    overrideFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrideFactory, overrides || {});
  }
  attach(address: string): RoyaltyRegistry {
    return super.attach(address) as RoyaltyRegistry;
  }
  connect(signer: Signer): RoyaltyRegistry__factory {
    return super.connect(signer) as RoyaltyRegistry__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RoyaltyRegistryInterface {
    return new utils.Interface(_abi) as RoyaltyRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RoyaltyRegistry {
    return new Contract(address, _abi, signerOrProvider) as RoyaltyRegistry;
  }
}
