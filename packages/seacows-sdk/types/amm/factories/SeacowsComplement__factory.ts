/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SeacowsComplement,
  SeacowsComplementInterface,
} from "../SeacowsComplement";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "COMPLEMENT_PRECISION",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "COMPLEMENT_THRESHOLD",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "_tokenAmountOut",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "_nftAmountOut",
        type: "int256",
      },
    ],
    name: "getComplemenetedAssetsOut",
    outputs: [
      {
        internalType: "int256",
        name: "tokenAmountOut",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "nftAmountOut",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "newTokenComplement",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "newNftComplement",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nftComplement",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenComplement",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610304806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80635b8d14da1461005c5780639a2fe1bd146100945780639e75baa7146100a65780639e7ef4c6146100b5578063a4ac5c1d146100c4575b600080fd5b61006f61006a3660046101d5565b6100cc565b6040805194855260208501939093529183015260608201526080015b60405180910390f35b6001545b60405190815260200161008b565b610098670de0b6b3a764000081565b6100986706f05b59d3b2000081565b600054610098565b6000806000806000856001546100e2919061020d565b9050670de0b6b3a76400006000816100fa8185610235565b6101049190610271565b9050600061011282856102a7565b90506706f05b59d3b2000081126101305761012d838361020d565b91505b828212610196578196506000898861014891906102a7565b905080600154610158919061020d565b955060008a6101678d84610271565b6101719190610235565b905061017d818d6102a7565b99508060005461018d91906102a7565b975050506101c8565b886001546101a491906102a7565b6000975094506101b58a6002610271565b9750896000546101c5919061020d565b95505b5050505092959194509250565b600080604083850312156101e857600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b808201828112600083128015821682158216171561022d5761022d6101f7565b505092915050565b60008261025257634e487b7160e01b600052601260045260246000fd5b600160ff1b82146000198414161561026c5761026c6101f7565b500590565b80820260008212600160ff1b8414161561028d5761028d6101f7565b81810583148215176102a1576102a16101f7565b92915050565b81810360008312801583831316838312821617156102c7576102c76101f7565b509291505056fea26469706673582212206eab34dd7fb4705ecd10f5fedec366a0aabc83515e143b130fa37079fddba5cc64736f6c63430008120033";

export class SeacowsComplement__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SeacowsComplement> {
    return super.deploy(overrides || {}) as Promise<SeacowsComplement>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SeacowsComplement {
    return super.attach(address) as SeacowsComplement;
  }
  connect(signer: Signer): SeacowsComplement__factory {
    return super.connect(signer) as SeacowsComplement__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SeacowsComplementInterface {
    return new utils.Interface(_abi) as SeacowsComplementInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SeacowsComplement {
    return new Contract(address, _abi, signerOrProvider) as SeacowsComplement;
  }
}
