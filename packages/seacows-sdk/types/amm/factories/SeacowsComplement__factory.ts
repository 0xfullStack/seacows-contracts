/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SeacowsComplement,
  SeacowsComplementInterface,
} from "../SeacowsComplement";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "COMPLEMENT_PRECISION",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "COMPLEMENT_THRESHOLD",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "__tokenAmountOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "__nftAmountOut",
        type: "uint256",
      },
    ],
    name: "getComplemenetedAssetsOut",
    outputs: [
      {
        internalType: "int256",
        name: "tokenAmountOut",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "nftAmountOut",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "newTokenComplement",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "newNftComplement",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nftComplement",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenComplement",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610320806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806369eedcde1461005c5780639a2fe1bd146100945780639e75baa7146100a65780639e7ef4c6146100b5578063a4ac5c1d146100c1575b600080fd5b61006f61006a3660046101f1565b6100c9565b6040805194855260208501939093529183015260608201526080015b60405180910390f35b6001545b60405190815260200161008b565b610098670de0b6b3a764000081565b61009864b1a2bc2ec581565b600054610098565b600080600080600086905060008690506000816001546100e99190610229565b9050670de0b6b3a76400006000816101018185610251565b61010b919061028d565b9050600061011982856102c3565b905064b1a2bc2ec58112610133576101318383610229565b505b8282126101b0578198506000858361014b91906102c3565b90508060015461015b91906102c3565b975060008661016a898461028d565b6101749190610251565b9050600081131561018d5761018a600182610229565b90505b61019781896102c3565b9b50806000546101a791906102c3565b995050506101e2565b846001546101be9190610229565b6000995096506101cf86600261028d565b9950856000546101df91906102c3565b97505b50505050505092959194509250565b6000806040838503121561020457600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b808201828112600083128015821682158216171561024957610249610213565b505092915050565b60008261026e57634e487b7160e01b600052601260045260246000fd5b600160ff1b82146000198414161561028857610288610213565b500590565b80820260008212600160ff1b841416156102a9576102a9610213565b81810583148215176102bd576102bd610213565b92915050565b81810360008312801583831316838312821617156102e3576102e3610213565b509291505056fea2646970667358221220ca68b9ff6d9e1da427685163fc6a55c6d895c3a5c461eda4693b57f6a73da00164736f6c63430008120033";

export class SeacowsComplement__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SeacowsComplement> {
    return super.deploy(overrides || {}) as Promise<SeacowsComplement>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SeacowsComplement {
    return super.attach(address) as SeacowsComplement;
  }
  connect(signer: Signer): SeacowsComplement__factory {
    return super.connect(signer) as SeacowsComplement__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SeacowsComplementInterface {
    return new utils.Interface(_abi) as SeacowsComplementInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SeacowsComplement {
    return new Contract(address, _abi, signerOrProvider) as SeacowsComplement;
  }
}
