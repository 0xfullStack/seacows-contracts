/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { FixidityLib, FixidityLibInterface } from "../FixidityLib";

const _abi = [
  {
    inputs: [
      {
        internalType: "int256",
        name: "x",
        type: "int256",
      },
    ],
    name: "abs",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "x",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "y",
        type: "int256",
      },
    ],
    name: "add",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "x",
        type: "int256",
      },
      {
        internalType: "uint8",
        name: "_originDigits",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "_destinationDigits",
        type: "uint8",
      },
    ],
    name: "convertFixed",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "digits",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "x",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "y",
        type: "int256",
      },
    ],
    name: "divide",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "fixed1",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "x",
        type: "int256",
      },
    ],
    name: "fractional",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "x",
        type: "int256",
      },
    ],
    name: "fromFixed",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "x",
        type: "int256",
      },
      {
        internalType: "uint8",
        name: "_destinationDigits",
        type: "uint8",
      },
    ],
    name: "fromFixed",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "x",
        type: "int256",
      },
    ],
    name: "integer",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "maxFixedAdd",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "maxFixedDiv",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "maxFixedDivisor",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "maxFixedMul",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "maxFixedSub",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "maxInt256",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "maxNewFixed",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "minInt256",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "minNewFixed",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "mulPrecision",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "x",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "y",
        type: "int256",
      },
    ],
    name: "multiply",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "x",
        type: "int256",
      },
    ],
    name: "newFixed",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "x",
        type: "int256",
      },
      {
        internalType: "uint8",
        name: "_originDigits",
        type: "uint8",
      },
    ],
    name: "newFixed",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "numerator",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "denominator",
        type: "int256",
      },
    ],
    name: "newFixedFraction",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "x",
        type: "int256",
      },
    ],
    name: "reciprocal",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "x",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "y",
        type: "int256",
      },
    ],
    name: "subtract",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x610c8961003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106101985760003560e01c806395ac72cf116100e8578063b93ea812116100a1578063d6c1528b1161007b578063d6c1528b1461033c578063e179f2521461034f578063f598423614610362578063f800d6721461026657600080fd5b8063b93ea81214610303578063bd5cbd6214610316578063cf94513a1461032957600080fd5b806395ac72cf146102a65780639c15bca4146102b95780639ca7eb76146102cc5780639e20437c146102d7578063a0601be7146102e6578063a5f3c23b146102f057600080fd5b80633c4308a8116101555780637bc140ea1161012f5780637bc140ea146102665780637c1bd7c814610282578063925d6dfd1461028c57806393b027b41461029957600080fd5b80633c4308a8146102235780634daaea5314610236578063718db30a1461024957600080fd5b80630e9989931461019d5780631b5ac4b5146101c35780632179bb6c146101d6578063239909ea146101e65780632fd81f4614610200578063393ca44614610210575b600080fd5b6101b06101ab366004610900565b610375565b6040519081526020015b60405180910390f35b6101b06101d1366004610900565b610391565b69d3c21bcecceda10000006101b0565b73af298d050e4395d69670b12b7f410000000000006101b0565b6614945b2700518560731b6101b0565b6101b061021e36600461092a565b6103c0565b6101b0610231366004610956565b6103d5565b6101b0610244366004610978565b6105c6565b759abe14cd44753b52c4926a9672793542d78c3615cf39196101b0565b759abe14cd44753b52c4926a9672793542d78c3615cf3a6101b0565b600160ff1b6101b0565b6001600160fe1b036101b0565b6001600160ff1b036101b0565b6101b06102b4366004610956565b6106b0565b6101b06102c7366004610900565b61073b565b64e8d4a510006101b0565b604051601881526020016101ba565b600360fe1b6101b0565b6101b06102fe366004610956565b61076c565b6101b0610311366004610956565b6107d9565b6101b0610324366004610900565b6107e8565b6101b0610337366004610900565b61084b565b6101b061034a36600461092a565b610876565b6101b061035d366004610900565b610884565b6101b0610370366004610956565b6108a5565b600061038b69d3c21bcecceda1000000836109ca565b92915050565b600080821261039e575090565b60006103a983610a06565b90506000811361038b5761038b610a22565b919050565b60006103ce836018846105c6565b9392505050565b60008215806103e2575081155b156103ef5750600061038b565b69d3c21bcecceda1000000820361040757508161038b565b69d3c21bcecceda1000000830361041f57508061038b565b600069d3c21bcecceda100000061043585610884565b61043f91906109ca565b9050600061044c8561084b565b9050600069d3c21bcecceda100000061046486610884565b61046e91906109ca565b9050600061047b8661084b565b905060006104898386610a38565b905084156104a9578261049c86836109ca565b146104a9576104a9610a22565b60006104bf69d3c21bcecceda100000083610a38565b905081156104e95769d3c21bcecceda10000006104dc83836109ca565b146104e9576104e9610a22565b90508060006104f88587610a38565b90508515610518578461050b87836109ca565b1461051857610518610a22565b60006105248589610a38565b90508715610544578461053789836109ca565b1461054457610544610a22565b61055364e8d4a51000886109ca565b965061056464e8d4a51000866109ca565b945060006105728689610a38565b90508715610592578561058589836109ca565b1461059257610592610a22565b8461059d818561076c565b90506105a9818461076c565b90506105b5818361076c565b9d9c50505050505050505050505050565b600060268360ff16111580156105e0575060268260ff1611155b6105ec576105ec610a22565b60008260ff168460ff161115610625576106068385610abd565b905061061381600a610bc4565b61061d90866109ca565b9150506103ce565b8260ff168460ff1610156106a75761063d8484610abd565b905061064a81600a610bc4565b61065b906001600160ff1b036109ca565b85131561066a5761066a610a22565b61067581600a610bc4565b61068390600160ff1b6109ca565b85121561069257610692610a22565b61069d81600a610bc4565b61061d9086610a38565b50929392505050565b6000759abe14cd44753b52c4926a9672793542d78c3615cf3a8313156106d8576106d8610a22565b759abe14cd44753b52c4926a9672793542d78c3615cf3a8213156106fe576106fe610a22565b8160000361070e5761070e610a22565b6000610719846107e8565b90506000610726846107e8565b905061073282826108a5565b95945050505050565b60008160000361074d5761074d610a22565b8161076269d3c21bcecceda100000080610a38565b61038b91906109ca565b6000806107798385610bd3565b905060008413801561078b5750600083135b156107aa57838113801561079e57508281135b6107aa576107aa610a22565b6000841280156107ba5750600083125b156103ce5783811280156107cd57508281125b6103ce576103ce610a22565b60006103ce836102fe84610a06565b6000759abe14cd44753b52c4926a9672793542d78c3615cf3a82131561081057610810610a22565b759abe14cd44753b52c4926a9672793542d78c3615cf391982121561083757610837610a22565b61038b69d3c21bcecceda100000083610a38565b600069d3c21bcecceda100000061086281846109ca565b61086c9190610a38565b61038b9083610c14565b60006103ce838360186105c6565b600069d3c21bcecceda100000061089b81846109ca565b61038b9190610a38565b600069d3c21bcecceda100000082036108bf57508161038b565b816000036108cf576108cf610a22565b73af298d050e4395d69670b12b7f410000000000008213156108f3576108f3610a22565b6103ce836102318461073b565b60006020828403121561091257600080fd5b5035919050565b803560ff811681146103bb57600080fd5b6000806040838503121561093d57600080fd5b8235915061094d60208401610919565b90509250929050565b6000806040838503121561096957600080fd5b50508035926020909101359150565b60008060006060848603121561098d57600080fd5b8335925061099d60208501610919565b91506109ab60408501610919565b90509250925092565b634e487b7160e01b600052601160045260246000fd5b6000826109e757634e487b7160e01b600052601260045260246000fd5b600160ff1b821460001984141615610a0157610a016109b4565b500590565b6000600160ff1b8201610a1b57610a1b6109b4565b5060000390565b634e487b7160e01b600052600160045260246000fd5b60006001600160ff1b0381841382841380821686840486111615610a5e57610a5e6109b4565b600160ff1b6000871282811687830589121615610a7d57610a7d6109b4565b60008712925087820587128484161615610a9957610a996109b4565b87850587128184161615610aaf57610aaf6109b4565b505050929093029392505050565b600060ff821660ff841680821015610ad757610ad76109b4565b90039392505050565b600181815b80851115610b1b578160001904821115610b0157610b016109b4565b80851615610b0e57918102915b93841c9390800290610ae5565b509250929050565b600082610b325750600161038b565b81610b3f5750600061038b565b8160018114610b555760028114610b5f57610b7b565b600191505061038b565b60ff841115610b7057610b706109b4565b50506001821b61038b565b5060208310610133831016604e8410600b8410161715610b9e575081810a61038b565b610ba88383610ae0565b8060001904821115610bbc57610bbc6109b4565b029392505050565b60006103ce60ff841683610b23565b600080821280156001600160ff1b0384900385131615610bf557610bf56109b4565b600160ff1b8390038412811615610c0e57610c0e6109b4565b50500190565b60008083128015600160ff1b850184121615610c3257610c326109b4565b6001600160ff1b0384018313811615610c4d57610c4d6109b4565b5050039056fea264697066735822122028dd838b2a836803178724912a6f8cc91330c25ed22aec0bc4fa2808419ce1dd64736f6c634300080d0033";

export class FixidityLib__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FixidityLib> {
    return super.deploy(overrides || {}) as Promise<FixidityLib>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): FixidityLib {
    return super.attach(address) as FixidityLib;
  }
  connect(signer: Signer): FixidityLib__factory {
    return super.connect(signer) as FixidityLib__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FixidityLibInterface {
    return new utils.Interface(_abi) as FixidityLibInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FixidityLib {
    return new Contract(address, _abi, signerOrProvider) as FixidityLib;
  }
}
